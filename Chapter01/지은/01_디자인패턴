#디자인 패턴
프로그램을 설계할 때 발생했던 문제들을 객체 간의 상호 관계 등을 이용하여 해결할 수 있도록 하나의 **'규약'** 형태로 만들어 놓은 것을 의미

##1.1.1 싱글톤 패턴 (Singleton pattern)
- 하나의 클래스에 오직 **'하나'** 의 인스턴스만 가지는 패턴
- 주로 데이터베이스 연결 모듈에 많이 사용

```
class Singleton {
  private static instance: Singleton;

  private constructor() {}

  public static getInstance(): Singleton {
    if (!Singleton.instance) {
      Singleton.instance = new Singleton()
    }
    return Singleton.instance;
  }
}

const s1 = Singleton.getInstance();
const s2 = Singleton.getInstance();
console.log(s1 === s2);   // true
```

###장점 
하나의 인스턴스를 공유하며 사용하기 때문에 인스턴스를 생성할 때 드는 비용이 줄어듦

###단점
1. 의존성이 높아지며, 객제 지향 설계 원칙 중에 `개방-폐쇄 원칙`에 위배된다.
2. 단위 테스트(TDD)가 어렵다.

<br>

## 팩토리 패턴 (Factory pattern)
- 객체 생성 부분을 떼어낸 추상화한 패턴
- 상속 관계에 있는 두 클래스에서 상위 클래스가 중요한 뼈대를 결정, 하위 클래스에서 객체 생성에 관한 구체적인 내용을 결정.

``` 
enum CaffeeType {
    Espresso,
    Latte
}

// coffee menu
class Espresso {
    name: string = 'Espresso'
}
class Latte {
    name: string = 'Latte'
}

// coffee menu factory
class EspressoFactory {
    static createCoffee() {
        return new Espresso()
    }
}
class LatteFactory {
    static createCoffee() {
        return new Latte();
    }
}


// factory map
const CaffeeFactoryMap = {
    [CaffeeType.Espresso]: {
        factory: EspressoFactory
    },
    [CaffeeType.Latte]: {
        factory: LatteFactory
    }
}

class CoffeeFactory {
    static createCoffee(type: CaffeeType) {
        const factory =  CaffeeFactoryMap[type].factory;
        return factory.createCoffee();
    }
}

const main = () => {
    const coffee = CoffeeFactory.createCoffee(CaffeeType.Latte);
    console.log("주문하신 ${coffee.name} 나왔습니다.");
}

main();
```

###장점
- 상위 클래스와 하위 클래스가 분리되기 때문에 느슨한 결합을 가짐
- `단일 책임 원칙`과 `개방-폐쇄 원칙`에 부합하며, 유지 보수성 증가

###단점
- 하위 클래스를 많이 만들어야 하기 때문에 코드가 복잡해짐


<br> 

